@using Microsoft.JSInterop
@using System.Diagnostics
@inject IJSRuntime JSRuntime

<div id="@elementId" style="height: 600px; width: 100%;"></div>

@code {
    string elementId = $"map-{Guid.NewGuid().ToString("D")}";

    [Parameter] public double Zoom { get; set; }
    [Parameter] public Marker Location { get; set; }
    [Parameter] public List<Marker> Markers { get; set; }
    [Parameter] public bool IsSideBySide { get; set; }

    bool renderAllowed = false;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync(
            "deliveryMap.showOrUpdate",
            elementId,
            Location,
            Zoom,
            IsSideBySide);

            renderAllowed = true;
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
        }
    }

    public async Task RenderMarkers(List<Marker> markers)
    {
        if (!renderAllowed)
        {
            return;
        }

        try
        {
            await JSRuntime.InvokeVoidAsync(
            "deliveryMap.renderMarkers",
            elementId,
            markers);
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
        }
    }

    public async Task ClearMarkers()
    {
        if (!renderAllowed)
        {
            return;
        }

        try
        {
            await JSRuntime.InvokeVoidAsync(
            "deliveryMap.clearMarkers",
            elementId);
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
        }
    }
}
