@page "/playback"

@using System.Diagnostics

@inject IPlaybackService playbackService
@inject IStatsService statsService

<h2>Playback for Iridium ring alert bursts</h2>
<span class="size-label">Last page update: @latestUpdate</span>

<div class="track-order-map">
    <Map Zoom="4" Location="location" Markers="markers" @ref="liveMap" />
</div>
<p>Red dots indicate the physical satellite position, blue dots indicate signal activity in ground vecinity.</p>
<MatDatePicker Label="From" Enable24hours="true" Format="MM/dd/yy HH:mm" @bind-Value="FromValue" EnableTime="true"></MatDatePicker>
<MatDatePicker Label="To" Enable24hours="true" Format="MM/dd/yy HH:mm" @bind-Value="ToValue" EnableTime="true"></MatDatePicker>
<MatButton Outlined="true" @onclick="LoadDataAsync">Load</MatButton>

@if (stats == null || stats.Count == 0)
{
    <p>Make your selection...</p>
}
else
{
    <MatTable Items="@stats">
        <MatTableHeader>
            <th>Sat</th>
            <th>Ring alerts</th>
            <th>Broadcasts</th>
        </MatTableHeader>
        <MatTableRow>
            <td>@context.SatNo</td>
            <td>@context.Iras</td>
            <td>@context.Ibcs</td>
        </MatTableRow>
    </MatTable>
}

@code {
    private string latestUpdate;
    private Marker location = new Marker();
    private List<Marker> markers = new List<Marker>();
    private ICollection<ViewIra> playbackIras;
    private ICollection<Stat> stats;
    private Map liveMap;

    public DateTime FromValue { get; set; } = DateTime.Now.AddMinutes(-10).ToLocalTime();
    public DateTime ToValue { get; set; } = DateTime.Now.ToLocalTime();

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            SetLocation(location);
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadDataAsync()
    {
        //to gain the reference to liveMap we need to render the page at least once
        if (liveMap != null)
        {
            await liveMap.ClearMarkers(location);
        }

        //Debug.WriteLine("ReloadOnTimer thread {0}", Thread.CurrentThread.ManagedThreadId);
        try
        {
            playbackIras = await playbackService.GetViewIraAsync(FromValue.ToLocalTime(), ToValue.ToLocalTime());
            var playbackira = playbackIras.LastOrDefault();
            if (playbackira != null)
            {
                //at least one marker can be extracted
                List<Marker> coloredMarkers = new List<Marker>();
                foreach (ViewIra record in playbackIras)
                {
                    Marker m = new Marker();
                    m.Lat = record.Lat;
                    m.Lon = record.Lon;
                    m.Color = ILColors.ILColor(record.Alt, record.Quality);
                    coloredMarkers.Add(m);
                }

                //to gain the reference to liveMap we need to render the page at least once
                if (liveMap != null)
                {
                    //await liveMap.ClearMarkers(location);
                    await liveMap.RenderMarkers(coloredMarkers);
                }
            }

            stats = await statsService.GetStatsAsync(FromValue, ToValue);

            latestUpdate = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss z");

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
        }
    }

    private void SetLocation(Marker location)
    {
        location.Lat = 46.2382;
        location.Lon = -63.1311;
        location.Color = "green";
    }

    string ButtonState = "";
    void Click(EventArgs e)
    {
        ButtonState = "Clicked";
    }
}   