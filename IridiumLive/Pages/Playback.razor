@page "/playback"

@using System.Diagnostics

@inject IPlaybackService playbackService
@inject IStatsService statsService

<h2>Playback for Iridium ring alert bursts</h2>
<span class="size-label">Last page update: @latestUpdate</span>

<div class="track-order-map">
    <Map Zoom="4" Location="location" Markers="markers" @ref="liveMap" />
</div>
<p>Red dots indicate the physical satellite position, blue dots indicate signal activity in ground vecinity.</p>
<RadzenDatePicker TValue="DateTime" ShowTime="true" @bind-Value="FromValue" DateFormat="MM/dd/yyyy HH:mm" />
<RadzenDatePicker TValue="DateTime" ShowTime="true" @bind-Value="ToValue" DateFormat="MM/dd/yyyy HH:mm" />
<RadzenButton Click="@LoadDataAsync" Icon="replay" Text="Load" ButtonStyle="ButtonStyle.Secondary" class="il-button-playback" />

@if (stats == null || stats.Count == 0)
{
    @if (progressbar)
    {
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" class="il-progressbar-2" />
    }
    else
    {
        <p></p>
        <p>Make your selection...</p>
    }
}
else
{
    <p></p>
    <RadzenGrid AllowPaging="true" Data="@stats" TItem="Stat">
        <Columns>
            <RadzenGridColumn TItem="Stat" Property="SatNo" Title="Sat" />
            <RadzenGridColumn TItem="Stat" Property="Iras" Title="Ring alerts" />
            <RadzenGridColumn TItem="Stat" Property="Ibcs" Title="Broadcasts" />
        </Columns>
    </RadzenGrid>
}

@code {
    private string latestUpdate;
    private Marker location = new Marker();
    private List<Marker> markers = new List<Marker>();
    private ICollection<ViewIra> playbackIras;
    private ICollection<Stat> stats;
    private Map liveMap;
    private bool progressbar = false;

    public DateTime FromValue { get; set; } = DateTime.SpecifyKind(DateTime.Now.AddMinutes(-10), DateTimeKind.Local);
    public DateTime ToValue { get; set; } = DateTime.SpecifyKind(DateTime.Now, DateTimeKind.Local);

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            SetLocation(location);
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadDataAsync()
    {
        //to gain the reference to liveMap we need to render the page at least once
        if (liveMap != null)
        {
            await liveMap.ClearMarkers();
        }

        //display the progress bar
        try
        {
            progressbar = true;
            stats = null;
            StateHasChanged();
        }
        finally
        {
            progressbar = false;
        }

        //Debug.WriteLine("ReloadOnTimer thread {0}", Thread.CurrentThread.ManagedThreadId);
        try
        {
            FromValue = SetKind(FromValue, DateTimeKind.Local);
            ToValue = SetKind(ToValue, DateTimeKind.Local);
            playbackIras = await playbackService.GetViewIraAsync(FromValue, ToValue);
            var playbackira = playbackIras.LastOrDefault();
            if (playbackira != null)
            {
                //at least one marker can be extracted
                List<Marker> coloredMarkers = new List<Marker>();
                foreach (ViewIra record in playbackIras)
                {
                    Marker m = new Marker();
                    m.Lat = record.Lat;
                    m.Lon = record.Lon;
                    m.Color = ILColors.ILColor(record.Alt, record.Quality);
                    m.SatNo = record.SatNo;
                    m.Alt = record.Alt;
                    m.Quality = record.Quality;
                    coloredMarkers.Add(m);
                }

                //to gain the reference to liveMap we need to render the page at least once
                if (liveMap != null)
                {
                    //await liveMap.ClearMarkers(location);
                    await liveMap.RenderMarkers(coloredMarkers);
                }
            }

            stats = await statsService.GetStatsAsync(FromValue, ToValue);

            latestUpdate = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss z");

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
        }
    }

    private void SetLocation(Marker location)
    {
        location.Lat = 46.2382;
        location.Lon = -63.1311;
        location.Color = "green";
    }

    string ButtonState = "";
    void Click(EventArgs e)
    {
        ButtonState = "Clicked";
    }

    public static DateTime SetKind(DateTime DT, DateTimeKind DTKind)
    {
        var NewDT = new DateTime(DT.Year, DT.Month, DT.Day, DT.Hour, DT.Minute, DT.Second, DT.Millisecond, DTKind);
        return NewDT;
    }
}   