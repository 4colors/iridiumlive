@page "/stats"

@inherits OwningComponentBase<IridiumLiveDbContext>

@using System.Diagnostics

@inject IStatsService statsService
@inject TimerService timer

<h2>Statistics</h2>
<span class="size-label">Last page update: @latestUpdate</span>

@if (stats == null)
{
    <p>Loading...</p>
}
else
{
    <MatTable Items="@stats">
        <MatTableHeader>
            <th>Sat</th>
            <th>Ring alerts</th>
            <th>Broadcasts</th>
        </MatTableHeader>
        <MatTableRow>
            <td>@context.SatNo</td>
            <td>@context.Iras</td>
            <td>@context.Ibcs</td>
        </MatTableRow>
    </MatTable>
}

@code {
    private ICollection<Stat> stats;
    private string latestUpdate;
    private const int interval = 1000;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        StartTimer(interval);
        return base.OnAfterRenderAsync(firstRender);
    }

    private void StartTimer(int interval)
    {
        timer.SetTimer(interval);
        timer.OnElapsed -= TimerElapsedHandler;
        timer.OnElapsed += TimerElapsedHandler;
        //Debug.WriteLine("Timer Stats Started. {0}", Thread.CurrentThread.ManagedThreadId);
    }

    private void TimerElapsedHandler()
    {
        //Debug.WriteLine("Timer Stats Elapsed. {0}", Thread.CurrentThread.ManagedThreadId);
        InvokeAsync(async () => await ReloadOnTimer());
    }

    private async Task ReloadOnTimer()
    {
        try
        {
            stats = await statsService.GetStatsAsync();
            latestUpdate = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss z");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
        }
    }
}   