@page "/stats"

@inherits OwningComponentBase<IridiumLiveDbContext>

@inject IStatsService statsService

@implements IDisposable

<h2>Statistics</h2>
<span class="size-label">Last page update: @latestUpdate</span>

@if (stats == null)
{
    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" class="il-progressbar-2" />
}
else
{
    <RadzenGrid AllowPaging="true" Data="@stats" TItem="Stat">
        <Columns>
            <RadzenGridColumn TItem="Stat" Property="SatNo" Title="Sat" />
            <RadzenGridColumn TItem="Stat" Property="Iras" Title="Ring alerts" />
            <RadzenGridColumn TItem="Stat" Property="Ibcs" Title="Broadcasts" />
        </Columns>
    </RadzenGrid>
}

@code {
    private ICollection<Stat> stats;
    private string latestUpdate;

    private Timer timer;
    private int timerInterval = 10000;
    private bool timerHasBeenDisposed = false;
    Stopwatch sw;
    string uniquePageId;

    protected override void OnInitialized()
    {
        uniquePageId = "STATS-" + Guid.NewGuid().ToString();
        sw = new Stopwatch();
        sw.Start();
        Debug.WriteLine($"Initializing {uniquePageId}");

        timer = new Timer(OnTimerElapsed, (object)timerHasBeenDisposed, 1000, timerInterval);
    }

    /// <summary>
    /// This is where we trigger the load of new data.
    /// If the timer has elapsed after it has been disposed, we exit.
    /// </summary>
    /// <param name="state"></param>
    private void OnTimerElapsed(object state)
    {
        Debug.WriteLine("OnTimerElapsed after {0} ms. Triggering page {1} load.", sw.ElapsedMilliseconds, uniquePageId);
        sw.Restart();

        if ((bool)state)
        {
            Debug.WriteLine("Called after disposed {0}. Exiting!", uniquePageId);
            return;
        }

        InvokeAsync(async () => await LoadOnTimerAsync());
    }

    private async Task LoadOnTimerAsync()
    {
        try
        {
            stats = await statsService.GetStatsAsync();
            latestUpdate = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss z");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
        }
        finally
        {
            Debug.WriteLine("Page {0} loaded after {1} ms.", uniquePageId, sw.ElapsedMilliseconds);
            sw.Restart();
        }
    }

    /// <summary>
    /// Gets called when the page or tab is closed.
    /// </summary>
    void IDisposable.Dispose()
    {
        timerHasBeenDisposed = true;
        Debug.WriteLine("Page {0} closed. Timer disposed {1} ms.", uniquePageId, sw.ElapsedMilliseconds);

        try
        {
            timer?.Dispose();
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
        }
    }
}   