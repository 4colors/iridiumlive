@page "/live"

@inject ILiveService liveService

@implements IDisposable

<h2>Live view for Iridium ring alert bursts</h2>
<span class="size-label">Last page update: @latestUpdate</span>

@*this is totally not the most elegant solution but for someone who does not know css would do.*@
@if (!sideBySideView)
{
    <div class="live-layout-buttons">
        <RadzenButton Click="@ToggleHVView" ButtonStyle="ButtonStyle.Secondary" Icon="smartphone"></RadzenButton>
    </div>

    <div class="track-order-map">
        <Map Zoom="4" Location="location" Markers="markers" IsSideBySide="false" @ref="liveMap" />
    </div>
    <p>Red dots indicate the physical satellite position, blue dots indicate signal activity in ground vecinity.</p>

    @if (viewIras == null || liveMap == null || oldViewIras == null)
    {
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" class="il-progressbar-2" />
    }
    else
    {
        if (viewIras.Count == 0)
        {
            viewIras = oldViewIras;
        }
        else
        {
            oldViewIras = viewIras;
        }

        <RadzenGrid AllowPaging="true" Data="@viewIras" TItem="ViewIra">
            <Columns>
                <RadzenGridColumn TItem="ViewIra" Property="Name" Title="Sat" />
                <RadzenGridColumn TItem="ViewIra" Property="Time" Title="Time" Width="200px" />
                <RadzenGridColumn TItem="ViewIra" Property="Quality" Title="Quality">
                    <Template Context="context">
                        @context.Quality %
                    </Template>
                </RadzenGridColumn>
                <RadzenGridColumn TItem="ViewIra" Property="Beam" Title="Beam" />
                <RadzenGridColumn TItem="ViewIra" Title="Coordinates" Width="120px">
                    <Template Context="context">
                        @context.Lat N @context.Lon E
                    </Template>
                </RadzenGridColumn>
                <RadzenGridColumn TItem="ViewIra" Title="Altitude">
                    <Template Context="context">
                        @string.Format("{0} km", context.Alt)
                    </Template>
                </RadzenGridColumn>
            </Columns>
        </RadzenGrid>
    }
}
else
{
    <div class="live-layout-buttons">
        <RadzenButton Click="@ToggleHVView" ButtonStyle="ButtonStyle.Secondary" Icon="tablet"></RadzenButton>
    </div>

    <div class="container">
        <div class="row">
            <div class="col-7 pl-0">

                <div class="track-order-map">
                    <Map Zoom="4" Location="location" IsSideBySide="true" Markers="markers" @ref="liveMap" />
                </div>
                <p>Red dots indicate the physical satellite position, blue dots indicate signal activity in ground vecinity.</p>

            </div>
            <div class="col-5 pr-0">

                @if (viewIras == null || liveMap == null || oldViewIras == null)
                {
                    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" class="il-progressbar-2" />
                }
                else
                {
                    if (viewIras.Count == 0)
                    {
                        viewIras = oldViewIras;
                    }
                    else
                    {
                        oldViewIras = viewIras;
                    }

                    <RadzenGrid AllowPaging="true" Data="@viewIras" TItem="ViewIra">
                        <Columns>
                            <RadzenGridColumn TItem="ViewIra" Property="Name" Title="Sat" />
                            <RadzenGridColumn TItem="ViewIra" Property="Time" Title="Time" Width="200px" />
                            <RadzenGridColumn TItem="ViewIra" Property="Quality" Title="Quality">
                                <Template Context="context">
                                    @context.Quality %
                                </Template>
                            </RadzenGridColumn>
                            <RadzenGridColumn TItem="ViewIra" Property="Beam" Title="Beam" />
                            <RadzenGridColumn TItem="ViewIra" Title="Coordinates" Width="120px">
                                <Template Context="context">
                                    @context.Lat N @context.Lon E
                                </Template>
                            </RadzenGridColumn>
                            <RadzenGridColumn TItem="ViewIra" Title="Altitude">
                                <Template Context="context">
                                    @string.Format("{0} km", context.Alt)
                                </Template>
                            </RadzenGridColumn>
                        </Columns>
                    </RadzenGrid>
                }

            </div>
        </div>
    </div>
}

@code {
    private bool sideBySideView = false;
    private string latestUpdate;
    private Marker location = new Marker();
    private List<Marker> markers = new List<Marker>();
    private ICollection<ViewIra> viewIras, oldViewIras;
    private long lastUtcTicks;
    private Map liveMap;

    private Timer timer;
    private int timerInterval = 10000;
    private bool timerHasBeenDisposed = false;
    Stopwatch sw;
    string uniquePageId;

    protected override void OnInitialized()
    {
        uniquePageId = "LIVE-" + Guid.NewGuid().ToString();
        sw = new Stopwatch();
        sw.Start();
        Debug.WriteLine($"Initializing {uniquePageId}");

        timer = new Timer(OnTimerElapsed, (object)timerHasBeenDisposed, 1000, timerInterval);
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            lastUtcTicks = 0;
            SetLocation(location);
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    /// <summary>
    /// This is where we trigger the load of new data.
    /// If the timer has elapsed after it has been disposed, we exit.
    /// </summary>
    /// <param name="state"></param>
    private void OnTimerElapsed(object state)
    {
        Debug.WriteLine("OnTimerElapsed after {0} ms. Triggering page {1} load.", sw.ElapsedMilliseconds, uniquePageId);
        sw.Restart();

        if ((bool)state)
        {
            Debug.WriteLine("Called after disposed {0}. Exiting!", uniquePageId);
            return;
        }

        InvokeAsync(async () => await LoadOnTimerAsync());
    }

    private async Task LoadOnTimerAsync()
    {
        //Debug.WriteLine("ReloadOnTimer thread {0}", Thread.CurrentThread.ManagedThreadId);
        try
        {
            viewIras = await liveService.GetLiveIraAsync(lastUtcTicks);
            if (oldViewIras == null)
            {
                if (viewIras != null)
                {
                    if (viewIras.Count > 0)
                    {
                        oldViewIras = viewIras;
                    }
                }
            }

            //the list must arrive in descending order otherwise the time is incorrectly computed
            var liveira = viewIras.FirstOrDefault();

            if (liveira != null)
            {
                //at least one marker can be extracted
                List<Marker> coloredMarkers = new List<Marker>();
                foreach (ViewIra record in viewIras)
                {
                    Marker m = new Marker();
                    m.Lat = record.Lat;
                    m.Lon = record.Lon;
                    m.Color = ILColors.ILColor(record.Alt, record.Quality);
                    m.SatNo = record.SatNo;
                    m.Alt = record.Alt;
                    m.Quality = record.Quality;
                    coloredMarkers.Add(m);
                }

                //to gain the reference to liveMap we need to render the page at least once
                if (liveMap != null)
                {
                    await liveMap.RenderMarkers(coloredMarkers);
                    lastUtcTicks = liveira.UtcTicks;
                }
            }

            latestUpdate = string.Format("{0} in {1}ms", DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss z"), sw.ElapsedMilliseconds);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
        }
        finally
        {
            Debug.WriteLine("Page {0} loaded after {1} ms.", uniquePageId, sw.ElapsedMilliseconds);
            sw.Restart();
        }
    }

    private void SetLocation(Marker location)
    {
        location.Lat = 46.2382;
        location.Lon = -63.1311;
        location.Color = "green";
    }

    private void ToggleHVView()
    {
        sideBySideView = !sideBySideView;
        StateHasChanged();
    }

    /// <summary>
    /// Gets called when the page or tab is closed.
    /// </summary>
    void IDisposable.Dispose()
    {
        timerHasBeenDisposed = true;
        Debug.WriteLine("Page {0} closed. Timer disposed {1} ms.", uniquePageId, sw.ElapsedMilliseconds);

        try
        {
            timer?.Dispose();
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
        }
    }
}   