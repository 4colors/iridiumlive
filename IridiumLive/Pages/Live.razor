@page "/live"

@using System.Diagnostics

@inject ILiveService liveService
@inject TimerService timer

<h2>Live view for Iridium ring alert bursts</h2>
<span class="size-label">Last page update: @latestUpdate</span>

<div class="track-order-map">
    <Map Zoom="4" Location="location" Markers="markers" @ref="liveMap" />
</div>

@if (liveIras == null || liveMap == null)
{
    <p>Awaiting for data...</p>
}
else
{
    if (liveIras.Count == 0)
    {
        liveIras = oldLiveIras;
    }
    else
    {
        oldLiveIras = liveIras;
    }
    <p>Red dots indicate the physical satellite position, blue dots indicate signal activity in ground vecinity.</p>
    <table class='table'>
        <thead>
            <tr>
                <th>Sat</th>
                <th>Time</th>
                <th>Quality</th>
                <th>Beam</th>
                <th>Coordinates</th>
                <th>Altitude</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var liveIra in liveIras)
            {
                string altitude = string.Format("{0} km", liveIra.Alt);
                <tr>
                    <td>@liveIra.Name</td>
                    <td>@liveIra.Time</td>
                    <td>@liveIra.Quality %</td>
                    <td>@liveIra.Beam</td>
                    <td>@liveIra.Lat N @liveIra.Lon E</td>
                    <td>@altitude</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string latestUpdate;
    private Marker location = new Marker();
    private List<Marker> markers = new List<Marker>();
    private ICollection<LiveIra> liveIras, oldLiveIras;
    private long lastUtcTicks;
    private Map liveMap;
    private const int interval = 5000;
    private bool disposed = false;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            lastUtcTicks = DateTimeOffset.Now.AddSeconds(-10).UtcTicks;
            SetLocation(location);
        }
        StartTimer(interval);
        return base.OnAfterRenderAsync(firstRender);
    }

    private void StartTimer(int interval)
    {
        timer.SetTimer(interval);
        timer.OnElapsed -= TimerElapsedHandler;
        timer.OnElapsed += TimerElapsedHandler;
        //Debug.WriteLine("Timer Live Started. {0}", Thread.CurrentThread.ManagedThreadId);
    }

    private void TimerElapsedHandler()
    {
        //Debug.WriteLine("Timer live Elapsed. {0}", Thread.CurrentThread.ManagedThreadId);
        InvokeAsync(async () => await ReloadOnTimer());
    }

    private async Task ReloadOnTimer()
    {
        //Debug.WriteLine("ReloadOnTimer thread {0}", Thread.CurrentThread.ManagedThreadId);
        try
        {
            liveIras = await liveService.GetLiveIraAsync(lastUtcTicks);
            if (oldLiveIras == null)
            {
                oldLiveIras = liveIras;
            }
            var liveira = liveIras.LastOrDefault();
            if (liveira != null)
            {
                //at least one marker can be extracted
                List<Marker> coloredMarkers = new List<Marker>();
                foreach (LiveIra record in liveIras)
                {
                    Marker m = new Marker();
                    m.Lat = record.Lat;
                    m.Lon = record.Lon;
                    m.Color = (record.Alt > 100) ? "red" : "blue";
                    coloredMarkers.Add(m);
                }

                //to gain the reference to liveMap we need to render the page at least once
                if (liveMap != null)
                {
                    await liveMap.RenderMarkers(coloredMarkers);
                    lastUtcTicks = liveira.UtcTicks;
                }
            }

            latestUpdate = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss z");

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
        }
    }

    private void SetLocation(Marker location)
    {
        location.Lat = 46.2382;
        location.Lon = -63.1311;
        location.Color = "green";
    }
}   