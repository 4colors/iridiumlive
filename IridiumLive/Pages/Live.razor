@page "/live"

@using System.Diagnostics

@inject ILiveService liveService
@inject TimerService timer

<h2>Live view for Iridium ring alert bursts</h2>
<span class="size-label">Last page update: @latestUpdate</span>

<div class="live-layout-buttons">
    <RadzenButton Click="@SitOnTop" ButtonStyle="ButtonStyle.Secondary" Icon="smartphone"></RadzenButton>
    @*<RadzenButton Click="@SideBySideAsync" ButtonStyle="ButtonStyle.Secondary" Icon="tablet"></RadzenButton>*@
</div>

<div class="track-order-map">
    <Map Zoom="4" Location="location" Markers="markers" @ref="liveMap" />
</div>
<p>Red dots indicate the physical satellite position, blue dots indicate signal activity in ground vecinity.</p>

@if (viewIras == null || liveMap == null || oldViewIras == null)
{
    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" class="il-progressbar-2" />
}
else
{
    if (viewIras.Count == 0)
    {
        viewIras = oldViewIras;
    }
    else
    {
        oldViewIras = viewIras;
    }

    <RadzenGrid AllowPaging="true" Data="@viewIras" TItem="ViewIra">
        <Columns>
            <RadzenGridColumn TItem="ViewIra" Property="Name" Title="Sat" />
            <RadzenGridColumn TItem="ViewIra" Property="Time" Title="Time" Width="200px" />
            <RadzenGridColumn TItem="ViewIra" Property="Quality" Title="Quality">
                <Template Context="context">
                    @context.Quality %
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="ViewIra" Property="Beam" Title="Beam" />
            <RadzenGridColumn TItem="ViewIra" Title="Coordinates" Width="120px">
                <Template Context="context">
                    @context.Lat N @context.Lon E
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="ViewIra" Title="Altitude">
                <Template Context="context">
                    @string.Format("{0} km", context.Alt)
                </Template>
            </RadzenGridColumn>
        </Columns>
    </RadzenGrid>
}

@code {
    private string latestUpdate;
    private Marker location = new Marker();
    private List<Marker> markers = new List<Marker>();
    private ICollection<ViewIra> viewIras, oldViewIras;
    private long lastUtcTicks;
    private Map liveMap;
    private const int interval = 10000;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            lastUtcTicks = 0;
            SetLocation(location);
        }
        StartTimer(interval);
        return base.OnAfterRenderAsync(firstRender);
    }

    private void StartTimer(int interval)
    {
        timer.SetTimer(interval);
        timer.OnElapsed -= TimerElapsedHandler;
        timer.OnElapsed += TimerElapsedHandler;
        //Debug.WriteLine("Timer Live Started. {0}", Thread.CurrentThread.ManagedThreadId);
    }

    private void TimerElapsedHandler()
    {
        //Debug.WriteLine("Timer live Elapsed. {0}", Thread.CurrentThread.ManagedThreadId);
        InvokeAsync(async () => await ReloadOnTimer());
    }

    private async Task ReloadOnTimer()
    {
        //Debug.WriteLine("ReloadOnTimer thread {0}", Thread.CurrentThread.ManagedThreadId);
        try
        {
            viewIras = await liveService.GetLiveIraAsync(lastUtcTicks);
            if (oldViewIras == null)
            {
                if (viewIras != null)
                {
                    if (viewIras.Count > 0)
                    {
                        oldViewIras = viewIras;
                    }
                }
            }
            var liveira = viewIras.LastOrDefault();
            if (liveira != null)
            {
                //at least one marker can be extracted
                List<Marker> coloredMarkers = new List<Marker>();
                foreach (ViewIra record in viewIras)
                {
                    Marker m = new Marker();
                    m.Lat = record.Lat;
                    m.Lon = record.Lon;
                    m.Color = ILColors.ILColor(record.Alt, record.Quality);
                    m.SatNo = record.SatNo;
                    m.Alt = record.Alt;
                    m.Quality = record.Quality;
                    coloredMarkers.Add(m);
                }

                //to gain the reference to liveMap we need to render the page at least once
                if (liveMap != null)
                {
                    await liveMap.RenderMarkers(coloredMarkers);
                    lastUtcTicks = liveira.UtcTicks;
                }
            }

            latestUpdate = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss z");

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
        }
    }

    private void SetLocation(Marker location)
    {
        location.Lat = 46.2382;
        location.Lon = -63.1311;
        location.Color = "green";
    }

    private void SitOnTop()
    {
        //use toggle instead of 2 buttons - vertical grouping
        
    }

    private void SideBySide()
    {
        //horohontal grouping
    }
}   