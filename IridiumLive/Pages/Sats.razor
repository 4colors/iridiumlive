@page "/sats"

@inject ISatsService satsService

@implements IDisposable

<h2>Satellites</h2>
<span class="size-label">Last page update: @latestUpdate</span>

<div class="live-layout-buttons">
    <RadzenButton ButtonStyle="ButtonStyle.Secondary" Click="@UpdateSatDetails" Icon="cloud_download" Text="Update details" Disabled="@btnDisabled"></RadzenButton>
</div>

@if (sats == null)
{
    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" class="il-progressbar-2" />
}
else
{
    <RadzenDataList WrapItems="true" AllowPaging="true" Data="@sats" TItem="Sat">
        <Template Context="sat">
            <RadzenCard Style="width:300px;">
                <div class="row">
                    <div class="col-md-6">
                        <div>Sat:</div>
                        <b>@sat.SatNo</b>
                    </div>
                    <div class="col-md-6">
                        <div>Name:</div>
                        <b>@string.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", @sat.Name)</b>
                    </div>
                    <div class="col-lg" style="margin-top: 6px;">
                        <div>Notes:</div>
                        <b>@sat.Notes</b>
                        <hr />
                        <a href='/editsat/@sat.Id'>Edit</a>
                    </div>
                </div>
            </RadzenCard>
        </Template>
    </RadzenDataList>
}

@code {
    private ICollection<Sat> sats, importedSats;
    private string latestUpdate;
    private int satCount = 0;

    private Timer timer;
    private int timerInterval = 10000;
    private bool timerHasBeenDisposed = false;
    Stopwatch sw;
    string uniquePageId;
    private bool btnDisabled = false;


    protected override void OnInitialized()
    {
        uniquePageId = "SATS-" + Guid.NewGuid().ToString();
        sw = new Stopwatch();
        sw.Start();
        Debug.WriteLine($"Initializing {uniquePageId}");

        timer = new Timer(OnTimerElapsed, (object)timerHasBeenDisposed, 1000, timerInterval);
    }

    /// <summary>
    /// This is where we trigger the load of new data.
    /// If the timer has elapsed after it has been disposed, we exit.
    /// </summary>
    /// <param name="state"></param>
    private void OnTimerElapsed(object state)
    {
        //Debug.WriteLine("OnTimerElapsed after {0} ms triggering page {1} load.", sw.ElapsedMilliseconds, uniquePageId);
        sw.Restart();

        if ((bool)state)
        {
            Debug.WriteLine("Called after disposed {0}. Exiting!", uniquePageId);
            return;
        }

        InvokeAsync(async () => await LoadOnTimerAsync());
    }

    private async Task LoadOnTimerAsync()
    {
        try
        {
            sats = await satsService.GetSatsAsync();
            satCount = sats.Count();
            latestUpdate = string.Format("{0} in {1}ms", DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss z"), sw.ElapsedMilliseconds);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
        }
        finally
        {
            Debug.WriteLine("Page {0} loaded after {1} ms.", uniquePageId, sw.ElapsedMilliseconds);
            sw.Restart();
        }
    }

    /// <summary>
    /// Gets called when the page or tab is closed.
    /// </summary>
    void IDisposable.Dispose()
    {
        timerHasBeenDisposed = true;
        Debug.WriteLine("Page {0} closed. Timer disposed {1} ms.", uniquePageId, sw.ElapsedMilliseconds);

        try
        {
            timer?.Dispose();
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
        }
    }

    private async Task UpdateSatDetails()
    {
        try
        {
            btnDisabled = true;
            StateHasChanged();

            importedSats = await satsService.GetImportedSatsAsync();

            foreach (var sat in importedSats)
            {
                await UpdateSatByNo(sat.SatNo, sat);
            }

        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
        }
        finally
        {
            btnDisabled = false;
            StateHasChanged();
        }
    }

    protected async Task UpdateSatByNo(int satNo, Sat sat)
    {
        try
        {
            await satsService.PutSatByNoAsync(satNo, sat);
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
        }
    }
}  