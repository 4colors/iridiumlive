@page "/sats"

@using System.Diagnostics

@inject ISatsService satsService
@inject TimerService timer

<h2>Satellites</h2>
<span class="size-label">Last page update: @latestUpdate</span>

@if (sats == null)
{
    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" class="il-progressbar-2" />
}
else
{
    <RadzenDataList WrapItems="true" AllowPaging="true" Data="@sats" TItem="Sat">
        <Template Context="sat">
            <RadzenCard Style="width:300px;">
                <div class="row">
                    <div class="col-md-6">
                        <div>Sat:</div>
                        <b>@sat.SatNo</b>
                    </div>
                    <div class="col-md-6">
                        <div>Name:</div>
                        <b>@string.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", @sat.Name)</b>
                    </div>
                    <div class="col-lg" style="margin-top: 6px;">
                        <div>Notes:</div>
                        <b>@sat.Notes</b>
                        <hr />
                        <a href='/editsat/@sat.Id'>Edit</a>
                    </div>
                </div>
            </RadzenCard>
        </Template>
    </RadzenDataList>
}

@code {
    private ICollection<Sat> sats;
    private string latestUpdate;
    private int satCount = 0;
    private const int interval = 3000;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        StartTimer(interval);
        return base.OnAfterRenderAsync(firstRender);
    }

    private void StartTimer(int interval)
    {
        timer.SetTimer(interval);
        timer.OnElapsed -= TimerElapsedHandler;
        timer.OnElapsed += TimerElapsedHandler;
        //Debug.WriteLine("Timer Sats Started. {0}", Thread.CurrentThread.ManagedThreadId);
    }

    private void TimerElapsedHandler()
    {
        //Debug.WriteLine("Timer Sats Elapsed. {0}", Thread.CurrentThread.ManagedThreadId);
        InvokeAsync(async () => await LoadDataAsync());
    }

    private async Task LoadDataAsync()
    {
        try
        {
            sats = await satsService.GetSatsAsync();
            satCount = sats.Count();
            latestUpdate = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss z");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
        }
    }
}  